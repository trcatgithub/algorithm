package dp;

import java.util.Arrays;

//给定一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。
//
//注意:
//
//
//每个数组中的元素不会超过 100
//数组的大小不会超过 200
//
//
//示例 1:
//
//输入: [1, 5, 11, 5]
//
//输出: true
//
//解释: 数组可以分割成 [1, 5, 5] 和 [11].
//
//
//
//
//示例 2:
//
//输入: [1, 2, 3, 5]
//
//输出: false
//
//解释: 数组不能分割成两个元素和相等的子集.
//
//
//
//
//来源：力扣（LeetCode）
//链接：https://leetcode-cn.com/problems/partition-equal-subset-sum
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
public class Solution12 {

//    // 回溯
//    // 个别用力超时
//    public boolean canPartition(int[] nums) {
//        // 处理边界问题
//        if(nums == null || nums.length < 2) {
//            return false;
//        }
//        // 计算数组元素和 并 寻找最大元素
//        int sum = 0;
//        int max = 0;
//        for(int num : nums) {
//            sum+= num;
//            max = Math.max(max, num);
//        }
//        // 数组和为奇数 或 最大元素大于数组和的一半
//        if((sum&1) == 1 || max > sum/2) {
//            return false;
//        }
//        // 最大元素等于数组和的一半
//        if(max == sum/2) {
//            return true;
//        }
//        return helper(sum/2, nums, 0);
//    }
//
//    private boolean helper(int sum, int[] nums, int p) {
//        // 找到和为sum的组合
//        if(sum == 0) {
//            return true;
//        }
//        // 和大于sum时返回false
//        if(sum < 0) {
//            return false;
//        }
//        for(int i=p; i<nums.length; i++) {
//            // 剪支
//            // 例子：2,5,5,11,1
//            // 第一次选择2
//            // 第二次选择5
//            // 第三次选择11(相邻的重复元素可以跳过)
//            if (i > p && nums[i] == nums[i - 1]) continue;
//            if (helper( sum - nums[i], nums, i + 1)) return true;
//        }
//        return false;
//    }

    // 动态规划
    // 26ms/38.2MB
    public boolean canPartition(int[] nums) {
        // 处理边界问题
        if(nums == null || nums.length <= 1) {
            return false;
        }
        // 计算数组和
        int sum = 0;
        for(int num : nums) {
            sum+= num;
        }
        // 和为奇数，return false
        if((sum&1) == 1) {
            return false;
        }
        int size = sum/2+1;
        // 背包问题：看数组中是否存在加起来为sum/2的数.
        // 背包容量（V） = sum/2
        // 每一个物品只能装一次,如果出现背包中重量等于sum/2则为true
        // dp[i]表示能否填满容量为i的背包
        boolean[] dp = new boolean[size];
        dp[0] = true;
        // 1, 5, 11, 5
        // [true, false, false, false, false, true, false, false, false, false, false, false]
        // [true, false, false, false, false, true, false, false, false, false, false, true]
        // [true, false, false, false, false, true, false, false, false, false, true, true]
        for(int i=0; i<nums.length; i++) {
            for(int j=size-1; j>=nums[i]; j--) {
                dp[j] = dp[j] || dp[j-nums[i]];
            }
        }
        return dp[size-1];
    }

    public static void main(String[] args) {
        int[] nums = new int[]{1, 5, 11, 5};
//        System.out.println(new Solution12().canPartition(nums) == true);
//        nums = new int[]{1, 2, 3, 5};
//        System.out.println(new Solution12().canPartition(nums) == false);
//        nums = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
//        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
//        43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60};
//        System.out.println(new Solution12().canPartition(nums) == true);
//        nums = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
//                21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
//                43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61};
//        System.out.println(new Solution12().canPartition(nums) == false);
//        nums = new int[]{1, 2, 3, 6};
//        System.out.println(new Solution12().canPartition(nums) == true);
//        nums = new int[]{};
//        System.out.println(new Solution12().canPartition(nums) == false);
//        nums = new int[]{1, 5, 5, 11};
//        System.out.println(new Solution12().canPartition(nums) == true);
//        nums = new int[]{101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,
//                121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,
//                144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,
//                167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,
//                190,191,192,193,194,195,196,197,198,199,200,201,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,99,97};
//        System.out.println(new Solution12().canPartition(nums));
        nums = new int[]{4,4,4,4,4,4,4,4,8,8,8,8,8,8,8,8,12,12,12,12,12,12,12,12,16,16,16,16,16,16,16,16,20,20,
                20,20,20,20,20,20,24,24,24,24,24,24,24,24,28,28,28,28,28,28,28,28,32,32,32,32,32,32,32,32,36,36,
                36,36,36,36,36,36,40,40,40,40,40,40,40,40,44,44,44,44,44,44,44,44,48,48,48,48,48,48,48,48,52,52,
                52,52,52,52,52,52,56,56,56,56,56,56,56,56,60,60,60,60,60,60,60,60,64,64,64,64,64,64,64,64,68,68,
                68,68,68,68,68,68,72,72,72,72,72,72,72,72,76,76,76,76,76,76,76,76,80,80,80,80,80,80,80,80,84,84,
                84,84,84,84,84,84,88,88,88,88,88,88,88,88,92,92,92,92,92,92,92,92,96,96,96,96,96,96,96,96,97,99};
        System.out.println(new Solution12().canPartition(nums));
    }
}
